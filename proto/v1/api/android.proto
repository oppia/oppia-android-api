syntax = "proto3";

package org.oppia.proto.v1.api;

import "org/oppia/proto/v1/structure/concept_card.proto";
import "org/oppia/proto/v1/structure/exploration.proto";
import "org/oppia/proto/v1/structure/question.proto";
import "org/oppia/proto/v1/structure/revision_card.proto";
import "org/oppia/proto/v1/structure/topic_summary.proto";
import "org/oppia/proto/v1/versions/api_versions.proto";
import "org/oppia/proto/v1/versions/structure_versions.proto";

option java_package = "org.oppia.proto.v1.api";
option java_multiple_files = true;

// The proto request made to the server to get the list of topics which are available for download.
message TopicListRequest {
  option (org.oppia.proto.v1.versions.api_proto_version_type) = TOPIC_LIST_REQUEST_RESPONSE_PROTO_VERSION;

  // The common proto version defining this request/response pair.
  org.oppia.proto.v1.versions.TopicListRequestResponseProtoVersion proto_version = 1;

  // Details about the Android app client that is making the request.
  ClientContext client_context = 2;
  // Details about the latest proto versions that this Android client can support.
  ClientCompatibilityContext compatibility_context = 3;
  // TODO: Fill this in.
  repeated VersionedStructureMetadata current_downloads_context = 4;
}

// The expected proto response from the server when provided with a TopicListRequest.
message TopicListResponse {
  option (org.oppia.proto.v1.versions.api_proto_version_type) = TOPIC_LIST_REQUEST_RESPONSE_PROTO_VERSION;

  // The common proto version defining this request/response pair.
  org.oppia.proto.v1.versions.TopicListRequestResponseProtoVersion proto_version = 1;

  // A list of all topics that are compatibly available to the client whose context corresponds to
  // this response. Note that topics marked as available for downloading or updating will always be
  // compatible with the local client, and topics that are marked as up-to-date are guaranteed to
  // be at the latest compatible version for the local client. Clients are also expected to lean on
  // existing local resources for topics that aren't yet downloaded.
  repeated AvailableTopic available_topics = 2;

  // A topic that's available to & compatible with the local client.
  message AvailableTopic {
    option (org.oppia.proto.v1.versions.api_proto_version_type) = TOPIC_LIST_REQUEST_RESPONSE_PROTO_VERSION;

    // The nature of the topic's availability.
    oneof availability_type {
      // Indicates a topic that's not yet downloaded by the local client, but is available to be
      // downloaded.
      DownloadableTopic downloadable_topic = 1;

      // Indicates a topic that's downloaded by the local client, but has a compatible update.
      UpdatableTopic updatable_topic = 2;

      // Indicates a topic that's both downloaded by the local client & full up-to-date. This mainly
      // serves as a lightweight indicator to ensure that the server & client are properly in-sync
      // with the state of the local client.
      UpToDateTopic up_to_date_topic = 3;
    }
  }

  // Represents a topic that's available to download and is not yet downloaded by the local client.
  message DownloadableTopic {
    option (org.oppia.proto.v1.versions.api_proto_version_type) = TOPIC_LIST_REQUEST_RESPONSE_PROTO_VERSION;

    // The ID of the topic that's available to newly download. This is expected to be used to
    // identify the local copy of the topic's summary in the event that the topic_summary field is
    // empty. Note that content_version is not also included since topic_summary is only missing if
    // the local client already has the latest, most up-to-date summary (including the corresponding
    // content version).
    string topic_id = 1;

    // The full summary for the current topic. Note that this will be absent if the local client
    // already has the latest summary downloaded as indicated by its download state context.
    org.oppia.proto.v1.structure.TopicSummary topic_summary = 2;

    // The size, in bytes, needed to download the topic.
    uint32 download_size_bytes = 3;
  }

  // Represents a topic that's available to be updated. Clients should use their existing topic
  // summary when displaying this topic, and not update it until the user requests to download the
  // topic. Future iterations of this API could include a preview summary here for clients to
  // provide context on the changes to the topic to help inform users.
  message UpdatableTopic {
    option (org.oppia.proto.v1.versions.api_proto_version_type) = TOPIC_LIST_REQUEST_RESPONSE_PROTO_VERSION;

    // The ID of the topic that's available to be updated. This is expected to correspond to an
    // existing summary that the local client already has for the topic. In the event it doesn't, it
    // may use the topic content API to retrieve the topic summary & treat this as a topic that's
    // available to download.
    string topic_id = 1;

    // The new topic content version that may be updated to (as compared with the local summary for
    // this topic which should have a smaller content version).
    uint32 content_version = 2;

    // The size, in bytes, required to download all missing pieces to update this topic.
    uint32 update_size_bytes = 3;

    // The precise list of structures that need to be updated in the local client in order to update
    // the topic. This may be a full update of the topic, but the server may also attempt to perform
    // an incremental update to minimize the download work & bandwidth needed by the local client.
    // update_size_bytes will reflect the data determined by the server to be needed to update the
    // topic.
    repeated VersionedStructureMetadata updated_structures = 4;
  }

  // Represents a topic that's been downloaded by the local client and is fully up-to-date.
  message UpToDateTopic {
    option (org.oppia.proto.v1.versions.api_proto_version_type) = TOPIC_LIST_REQUEST_RESPONSE_PROTO_VERSION;

    // The ID of the topic that the server believes the local client has downloaded. In the event
    // that this is incorrect, this topic can be treated as downloadable & its summary can be
    // fetched using the topic cnotent API.
    string topic_id = 1;

    // The content version of the topic that the server believes the local client has downloaded.
    uint32 content_version = 2;
  }
}

// The proto request made to the server to get the latest still-compatible content for specific
// topics.
message TopicContentRequest {
  option (org.oppia.proto.v1.versions.api_proto_version_type) = TOPIC_CONTENT_REQUEST_RESPONSE_PROTO_VERSION;

  // The common proto version defining this request/response pair.
  org.oppia.proto.v1.versions.TopicContentRequestResponseProtoVersion proto_version = 1;

  // Details about the Android app client that is making the request.
  ClientContext client_context = 2;
  // The IDs of the entities making up the topic whose data is to be fetched.
  repeated DownloadRequestStructureIdentifier identifiers = 3;
  // The maximum payload size that the server should furnish as a single download operation. This is
  // only a request, and may not be honoured by the server (which will only adhere to this field on
  // a best-effort basis).
  int32 requested_max_payload_size = 4;
}

// The expected proto response from the server when provided with a TopicContentRequest.
message TopicContentResponse {
  option (org.oppia.proto.v1.versions.api_proto_version_type) = TOPIC_CONTENT_REQUEST_RESPONSE_PROTO_VERSION;

  // The common proto version defining this request/response pair.
  org.oppia.proto.v1.versions.TopicContentRequestResponseProtoVersion proto_version = 1;

  // A list of the individual items to be downloaded.
  repeated DownloadResult download_results = 2;

  // The result of downloading a specific asset. This may either contain the result of the download,
  // or an indication that the download was skipped.
  message DownloadResult {
    option (org.oppia.proto.v1.versions.api_proto_version_type) = TOPIC_CONTENT_REQUEST_RESPONSE_PROTO_VERSION;

    // The entity type and ID corresponding to this download.
    DownloadRequestStructureIdentifier identifier = 1;

    oneof structure_type {
      // The presence of this value indicates that the request corresponding to this particular
      // identifier was skipped and suggested to retry by the Oppia backend. Note that the presence
      // of this value in the oneof is sufficient to indicate its state; its actual value does not
      // matter.
      bool skipped = 2;
      org.oppia.proto.v1.structure.TopicSummary topic_summary = 3;
      org.oppia.proto.v1.structure.RevisionCard revision_card = 4;
      org.oppia.proto.v1.structure.ConceptCard concept_card = 5;
      org.oppia.proto.v1.structure.Exploration exploration = 6;
      QuestionIdList question_id_list = 7;
      org.oppia.proto.v1.structure.Question question = 8;
    }
  }

  // A list of question IDs corresponding to the topic.
  message QuestionIdList {
    option (org.oppia.proto.v1.versions.api_proto_version_type) = TOPIC_CONTENT_REQUEST_RESPONSE_PROTO_VERSION;

    // The list of question IDs.
    repeated string question_ids = 1;
  }
}

// TODO: Add docs.
message ClientContext {
  option (org.oppia.proto.v1.versions.api_proto_version_type) = UNVERSIONED_API_PROTO;

  // TODO: Add doc and clarify name.
  string version_name = 1;
  // TODO: Add doc and clarify name.
  int64 version_code = 2;
}

// Information about the latest proto versions that the client can support.
// TODO: Clarify whether, if a client can support version N, this means it can support
// versions 1 to N, or only version N. If neither of these, then we might need a
// "from ... to" range for each field, rather than a single version. Note for future documentation
// iteration: clients only guarantee exact support. Onus is on the server to supply the exact proto
// structure version for client compatibility (which should always be possible per design of proto).
message ClientCompatibilityContext {
  option (org.oppia.proto.v1.versions.api_proto_version_type) = TOPIC_LIST_REQUEST_RESPONSE_PROTO_VERSION;

  // The latest proto version for topic summaries that the client can support.
  org.oppia.proto.v1.versions.TopicSummaryProtoVersion topic_summary_proto_version = 1;
  // The latest proto version for revision cards that the client can support.
  org.oppia.proto.v1.versions.RevisionCardProtoVersion revision_card_proto_version = 2;
  // The latest proto version for concept cards that the client can support.
  org.oppia.proto.v1.versions.ConceptCardProtoVersion concept_card_proto_version = 3;
  // The latest proto version for explorations that the client can support.
  org.oppia.proto.v1.versions.ExplorationProtoVersion exploration_proto_version = 4;
  // The latest proto version for questions that the client can support.
  org.oppia.proto.v1.versions.QuestionProtoVersion question_proto_version = 5;
  // The latest proto version for states that the client can support.
  org.oppia.proto.v1.versions.StateProtoVersion state_proto_version = 6;
  // The latest proto version for language-related protos that the client can support.
  org.oppia.proto.v1.versions.LanguageProtosVersion language_protos_version = 7;
  // The latest proto version for images that the client can support.
  org.oppia.proto.v1.versions.ImageProtoVersion thumbnail_proto_version = 8;
}

// TODO: Document this fully.
message VersionedStructureMetadata {
  option (org.oppia.proto.v1.versions.api_proto_version_type) = TOPIC_LIST_REQUEST_RESPONSE_PROTO_VERSION;

  int32 content_version = 1;
  oneof structure_type {
    string topic_id = 2;
    string topic_summary_id = 3;
    org.oppia.proto.v1.structure.SubtopicId revision_card_id = 4;
    string concept_card_id = 5;
    string story_id = 6;
    string exploration_id = 7;
    string question_id = 8;
    string skill_id = 9;
  }
}

// The type and ID of a specific asset that is being downloaded.
message DownloadRequestStructureIdentifier {
  option (org.oppia.proto.v1.versions.api_proto_version_type) = TOPIC_CONTENT_REQUEST_RESPONSE_PROTO_VERSION;

  uint32 content_version = 1;

  oneof structure_type {
    string topic_summary_id = 2;
    // The ID of the revision card ("subtopic") to be downloaded.
    org.oppia.proto.v1.structure.SubtopicId revision_card_id = 3;
    // The ID of the concept card to be downloaded.
    string concept_card_id = 4;
    // The ID of the exploration to be downloaded.
    string exploration_id = 5;
    // The skill ID whose associated questions are to be downloaded.
    // TODO: Clarify difference between this and concept_card_id above (field 2).
    string question_list_skill_id = 6;
    // The ID of the question to be downloaded.
    string question_id = 7;
  }
}
