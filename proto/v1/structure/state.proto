syntax = "proto3";

package org.oppia.proto.v1.structure;

import "org/oppia/proto/v1/structure/languages.proto";
import "org/oppia/proto/v1/structure/objects.proto";
import "org/oppia/proto/v1/structure/versions.proto";

option java_package = "org.oppia.proto.v1.structure";
option java_multiple_files = true;

// Proto message representing a single State.
// NOTE: Update StateProtoVersion if the structure of this proto is modified. The current version is
// 1.
message State {
  StateProtoVersion proto_version = 1;

  // The content of the state.
  SubtitledHtml content = 2;

  // The interactions of the state.
  InteractionInstance interaction = 3;

  // The recorded voiceovers of the state.
  RecordedVoiceovers recorded_voiceovers = 4;

  // The written translations of the state.
  WrittenTranslations written_translations = 5;
}

// Structure for a single interaction.
message InteractionInstance {

  // The different types of interactions.
  oneof interaction_type {

    // The interaction that takes the form of a simple Continue button.
    ContinueInstance continue = 1;

    // The interaction for fraction input.
    FractionInputInstance fraction_input = 2;

    // The interaction for item selection input.
    ItemSelectionInputInstance item_selection_input = 3;

    // The interaction for multiple item selection input.
    MultipleChoiceInputInstance multiple_choice_input = 4;

    // The interaction for number input.
    NumericInputInstance numeric_input = 5;

    // The interaction for text input.
    TextInputInstance text_input = 6;

    // The interaction for drag and drop sorting.
    DragAndDropSortInputInstance drag_and_drop_sort_input = 7;

    // The interaction allowing multiple-choice selection on an image.
    ImageClickInputInstance image_click_input = 8;

    // The interaction for ration input.
    RatioExpressionInputInstance ratio_expression_input = 9;

    // The interaction that allows the exploration to end.
    EndExplorationInstance end_exploration = 10;
  }
}

// Answer type: none (N/A since no answers are submitted for this interaction). Structure of the
// continue instance.
message ContinueInstance {
  CustomizationArgs customization_args = 1;

  // The default outcome of the continue instance.
  Outcome default_outcome = 2;

  // Continue interactions cannot have custom answer groups, and do not support solutions. Users
  // cannot receive hints since only one answer is possible (clicking the button).

  // Structure of the customization args of continue instance.
  message CustomizationArgs {
    // Note that while the continue interaction has a default button text defined, it's not used in
    // the app since the default string needs to come through the app's strings so that it can be
    // translated.
    SubtitledHtml button_text = 1;
  }
}

// Answer type: Fraction. Structure of the fraction input interaction.
message FractionInputInstance {

  // A set of arguments to customize the fraction input.
  CustomizationArgs customization_args = 1;

  // A list of answer groups of the fraction input.
  repeated AnswerGroup answer_groups = 2;

  // The default outcome of the fraction input.
  Outcome default_outcome = 3;

  // A list of hints in the fraction input.
  repeated Hint hints = 4;

  // The solution of the fraction input.
  Solution solution = 5;

  // Structure of the customization args of the fraction input.
  message CustomizationArgs {

    // The fraction is in simplest form or not.
    bool requires_simplest_form = 1;

    // The fraction allow to be in improper fraction.
    bool allow_improper_fractions = 2;

    // The fraction contains non zero integer part or not.
    bool allow_nonzero_integer_part = 3;

    // The custom placeholders for fraction input.
    SubtitledHtml custom_placeholder = 4;
  }

  // Structure of the solution of the fraction input.
  message Solution {

    // A set of common items for the solution in all interactions.
    BaseSolution base_solution = 1;

    // The correct answer of this fraction input.
    Fraction correct_answer = 2;
  }

  // Structure of the answer group of the fraction input.
  message AnswerGroup {

    // A set of common items for the answer groups in all the interactions.
    BaseAnswerGroup base_answer_group = 1;

    // A list of all the rules of the fraction input.
    repeated RuleSpec rule_specs = 2;
  }

  // Structure of the rule spec of the fraction input.
  message RuleSpec {

    // Different rules which can be applied on the fraction input.
    oneof rule_type {

      // A rule to check the fraction is equal to the fraction input.
      IsExactlyEqualToSpec is_exactly_equal_to = 1;

      // A rule to check the fraction is equivalent to the fraction input.
      IsEquivalentToSpec is_equivalent_to = 2;

      // A rule to check the fraction is equivalent and in the simplest form to the fraction input.
      IsEquivalentToAndInSimplestFormSpec is_equivalent_to_and_in_simplest_form = 3;

      // A rule to check the fraction is less than the fraction input.
      IsLessThanSpec is_less_than = 4;

      // A rule to check the fraction is greater than the fraction input.
      IsGreaterThanSpec is_greater_than = 5;

      // A rule to check the numerator of fraction is equal to the fraction input.
      HasNumeratorEqualToSpec has_numerator_equal_to = 6;

      // A rule to check the denominator of fraction is equal to the fraction input.
      HasDenominatorEqualToSpec has_denominator_equal_to = 7;

      // A rule to check the integer of fraction is equal to the fraction input.
      HasIntegerPartEqualToSpec has_integer_part_equal_to = 8;

      // A rule to check fraction has no fractional part to the fraction input.
      HasNoFractionalPartSpec has_no_fractional_part = 9;

      // A rule to check fraction has no fractional part equal to the fraction input.
      HasFractionalPartExactlyEqualToSpec has_fractional_part_exactly_equal_to = 10;
    }

    // Structure of the exactly equal rule check.
    message IsExactlyEqualToSpec {
      Fraction input = 1;
    }

    // Structure of the equivalent rule check.
    message IsEquivalentToSpec {
      Fraction input = 1;
    }

    // Structure of the equivalent and simple form rule check.
    message IsEquivalentToAndInSimplestFormSpec {
      Fraction input = 1;
    }

    // Structure of the less than rule check.
    message IsLessThanSpec {
      Fraction input = 1;
    }

    // Structure of the greater than rule check.
    message IsGreaterThanSpec {
      Fraction input = 1;
    }

    // Structure of the numerator equality rule check.
    message HasNumeratorEqualToSpec {
      int32 input = 1;
    }

    // Structure of the denominator equality rule check.
    message HasDenominatorEqualToSpec {
      uint32 input = 1;
    }

    // Structure of the integer part rule check.
    message HasIntegerPartEqualToSpec {
      int32 input = 1;
    }

    // Structure of the no fraction input rule check.
    message HasNoFractionalPartSpec {
      // No inputs for this rule spec.
    }

    // Structure of the fraction part exactly equality rule check.
    message HasFractionalPartExactlyEqualToSpec {
      Fraction input = 1;
    }
  }
}

// Answer type: SetOfTranslatableHtmlContentIds. Structure of the item selection input interaction.
message ItemSelectionInputInstance {

  // A set of arguments to customize the item selection input.
  CustomizationArgs customization_args = 1;

  // A list of answer groups of the item selection input.
  repeated AnswerGroup answer_groups = 2;

  // The default outcome of the item selection input.
  Outcome default_outcome = 3;

  // A list of hints in the item selection input.
  repeated Hint hints = 4;

  // Item selection does not support solutions.

  // Structure of the customization args of the item selection input.
  message CustomizationArgs {

    // The minimum number of items allowed for selection.
    int32 min_allowable_selection_count = 1;

    // The maximum number of items allowed for selection.
    int32 max_allowable_selection_count = 2;

    // The list of selectable items.
    repeated SubtitledHtml choices = 3;
  }

  // Structure of a single answer group of item selection input.
  message AnswerGroup {

    // A set of common items for the answer groups in all the interactions.
    BaseAnswerGroup base_answer_group = 1;

    // A list of all the rules of the item selection input.
    repeated RuleSpec rule_specs = 2;
  }

  // Structure of the rules of the item selection input.
  message RuleSpec {

    // Different type of rules for the item selection input instance.
    oneof rule_type {

      // A rule to check the equality.
      EqualsSpec equals = 1;

      // A rule to check atleast one item selected.
      ContainsAtLeastOneOfSpec contains_at_least_one_of = 2;

      // A rule to check non of the item is selected.
      DoesNotContainAtLeastOneOfSpec does_not_contain_at_least_one_of = 3;

      // A rule to check the propoer subset.
      IsProperSubsetOfSpec is_proper_subset_of = 4;
    }

    // Structure of the equal rule check.
    message EqualsSpec {
      SetOfTranslatableHtmlContentIds input = 1;
    }

    // Structure of atleast one item selection rule check.
    message ContainsAtLeastOneOfSpec {
      SetOfTranslatableHtmlContentIds input = 1;
    }

    // Structure of non of the item selection rule check.
    message DoesNotContainAtLeastOneOfSpec {
      SetOfTranslatableHtmlContentIds input = 1;
    }

    // Structure of proper subset of item selection rule check.
    message IsProperSubsetOfSpec {
      SetOfTranslatableHtmlContentIds input = 1;
    }
  }
}

// Answer type: non-negative int (uint32). Structure of the multiple choice input interaction.
message MultipleChoiceInputInstance {

  // A set of arguments to customize the multiple choice input.
  CustomizationArgs customization_args = 1;

  // A list of answer groups of the multiple choice input.
  repeated AnswerGroup answer_groups = 2;

  // The default outcome of the multiple choice input.
  Outcome default_outcome = 3;

  // The list of hints for this multiple choice input.
  repeated Hint hints = 4;

  // Multiple choice does not support solutions.

  // Structure of the customization args of the multiple choice input.
  message CustomizationArgs {

    // A list of possible choices from the multiple items.
    repeated SubtitledHtml choices = 1;
  }

  // Structure of a single answer group of multiple choice input.
  message AnswerGroup {

    // A base answer group is a set of common items for the answer groups in all the interactions.
    BaseAnswerGroup base_answer_group = 1;

    // A list of all the rules of the multiple choice input.
    repeated RuleSpec rule_specs = 2;
  }

  // Structure of the rules of the multiple choice input.
  message RuleSpec {

    // Differnt type of rules for the multiple choice input.
    oneof rule_type {

      // A rule to check the equality.
      EqualsSpec equals = 1;
    }

    // Structure of the equal rule check.
    message EqualsSpec {
      uint32 input = 1;
    }
  }
}

// Answer type: real (double). Structure of the number input interaction.
message NumericInputInstance {

  // A list of answer groups of the numeric input.
  repeated AnswerGroup answer_groups = 1;
  Solution solution = 2;

  // The default outcome of the numeric input.
  Outcome default_outcome = 3;
  repeated Hint hints = 4;

  // Numeric input does not have any customization arguments.

  // Structure of the solution of the numeric input.
  message Solution {

    // A set of common items for the solution in all interactions.
    BaseSolution base_solution = 1;

    // The correct answer of this numeric input.
    double correct_answer = 2;
  }

  // Structure of a single answer group of numeric input.
  message AnswerGroup {

    // A set of common items for the answer groups in all the interactions.
    BaseAnswerGroup base_answer_group = 1;

    // A list of all the rules of the numeric input.
    repeated RuleSpec rule_specs = 2;
  }

  // Structure of the rules of the numeric input.
  message RuleSpec {

    // Different type of rules which can be applied on the numeric input.
    oneof rule_type {

      // A rule to check the equality.
      EqualsSpec equals = 1;

      // A rule to check less than a value or not.
      IsLessThanSpec is_less_than = 2;

      // A rule to check the greater than value or not.
      IsGreaterThanSpec is_greater_than = 3;

      // A rule to check the less than or equal value or not.
      IsLessThanOrEqualToSpec is_less_than_or_equal_to = 4;

      // A rule to check the greter than or equal value or not.
      IsGreaterThanOrEqualToSpec is_greater_than_or_equal_to = 5;

      // A rule to check the inclusive range.
      IsInclusivelyBetweenSpec is_inclusively_between = 6;

      // A rule to check the tolerance range.
      IsWithinToleranceSpec is_within_tolerance = 7;
    }

    // Structure of the equal rule check.
    message EqualsSpec {
      double input = 1;
    }

    // Structure of the less than rule check.
    message IsLessThanSpec {
      double input = 1;
    }

    // Structure of the greater than rule check.
    message IsGreaterThanSpec {
      double input = 1;
    }

    // Structure of the less than or equal rule check.
    message IsLessThanOrEqualToSpec {
      double input = 1;
    }

    // Structure of the greater than or equal rule check.
    message IsGreaterThanOrEqualToSpec {
      double input = 1;
    }

    // Structure of the inclusive range rule check.
    message IsInclusivelyBetweenSpec {

      // lower value in inclusive range.
      double inputLowerInclusive = 1;

      // upper value in inclusive range.
      double inputUpperInclusive = 2;
    }

    // Structure of the tolerance ranage rule check.
    message IsWithinToleranceSpec {

      // Input tolerance value.
      double inputTolerance = 1;

      // Tolerance value to compare.
      double inputComparedValue = 2;
    }
  }
}

// Answer type: normalized string (string). Structure of the text input interaction.
message TextInputInstance {

  // A set of arguments to customize the text input instance.
  CustomizationArgs customization_args = 1;

  // A list of answer groups of the text input interaction instance.
  repeated AnswerGroup answer_groups = 2;

  // The default outcome of the text instance.
  Outcome default_outcome = 3;

  // A list of hints for text input instance.
  repeated Hint hints = 4;

  // The solution of the text input instance.
  Solution solution = 5;

  // Structure of the customization args of the text input instance.
  message CustomizationArgs {

    // A placeholder value for the text input instance.
    SubtitledHtml placeholder = 1;

    // The number of rows for the text input instance.
    int32 rows = 2;
  }

  // Structure of the solution of the text input instance.
  message Solution {

    // A set of common items for the solution in all interactions.
    BaseSolution base_solution = 1;

    // The correct answer of this text instance.
    string correct_answer = 2;
  }

  // Structure of a single answer group of text input.
  message AnswerGroup {

    // A set of common items for the answer groups in all the interactions.
    BaseAnswerGroup base_answer_group = 1;

    // A list of all the rules of the text instance.
    repeated RuleSpec rule_specs = 2;
  }

  // Structure of the rules of the text input instance.
  message RuleSpec {

    // Different rules which can be applied on the text input instance.
    oneof rule_type {

      // A rule to check  equal text.
      EqualsSpec equals = 1;

      // A rule to check starting text of input.
      StartsWithSpec starts_with = 2;

      // A rule to check a substring of the input text.
      ContainsSpec contains = 3;

      // A rule to check the input text equals.
      FuzzyEqualsSpec fuzzy_equals = 4;
    }

    // Structure of the equal rule check.
    message EqualsSpec {
      TranslatableSetOfNormalizedString input = 1;
    }

    // Structure of the rule to check starting text.
    message StartsWithSpec {
      TranslatableSetOfNormalizedString input = 1;
    }

    // Structureof the rule to check the substring of the text.
    message ContainsSpec {
      TranslatableSetOfNormalizedString input = 1;
    }

    // Structure of the rule to check text equality.
    message FuzzyEqualsSpec {
      TranslatableSetOfNormalizedString input = 1;
    }
  }
}

// Answer type: ListOfSetsOfTranslatableHtmlContentIds. Structure of the drag and drop sort input
// interaction.
message DragAndDropSortInputInstance {

  // A set of arguments to customize the drag and drop sort instance.
  CustomizationArgs customization_args = 1;

  // A list of answer groups of the drag and drop sort input interaction instance.
  repeated AnswerGroup answer_groups = 2;

  // The default outcome of the drag and drop sort instance.
  Outcome default_outcome = 3;

  // A list of all the hints for drag and drop sort instance.
  repeated Hint hints = 4;

  // The solution of the drag and drop sort instance.
  Solution solution = 5;

  // Structure of the customization args of the drag and drop sort instance.
  message CustomizationArgs {

    // A list of choice for drag and drop.
    repeated SubtitledHtml choices = 1;

    // Items are allowed at same position or not.
    bool allowMultipleItemsInSamePosition = 2;
  }

  // Structure of the solution of the drag and drop sort instance.
  message Solution {

    // A set of common items for the solution in all interactions.
    BaseSolution base_solution = 1;

    // The correct answer of this drag and drop sort instance.
    ListOfSetsOfTranslatableHtmlContentIds correct_answer = 2;
  }

  // Structure of a single answer group of drag and drop sort input.
  message AnswerGroup {

    // A set of common items for the answer groups in all the interactions.
    BaseAnswerGroup base_answer_group = 1;

    // A list of all the rules of the drag and drop sort instance.
    repeated RuleSpec rule_specs = 2;
  }

  // Structure of the rules of the drag and drop sort instance.
  message RuleSpec {

    // Different rules which can be applied on the drag and drop sort instance.
    oneof rule_type {

      // A rule to check equal order.
      IsEqualToOrderingSpec is_equal_to_ordering = 1;

      // A rule to check equal order and one item at incorrect position.
      IsEqualToOrderingWithOneItemAtIncorrectPositionSpec is_equal_to_ordering_with_one_item_at_incorrect_position = 2;

      // A rule to check the position of an item.
      HasElementXAtPositionYSpec has_element_x_at_position_y = 3;

      // A rule to check the previous position of an item.
      HasElementXBeforeElementYSpec has_element_x_before_element_y = 4;
    }

    // Structure of an equal order rule.
    message IsEqualToOrderingSpec {
      ListOfSetsOfTranslatableHtmlContentIds input = 1;
    }

    // Structure of an equal order with one incorrect position rule.
    message IsEqualToOrderingWithOneItemAtIncorrectPositionSpec {
      ListOfSetsOfTranslatableHtmlContentIds input = 1;
    }

    // Structure of an item position check rule.
    message HasElementXAtPositionYSpec {

      // The item whose position to check.
      TranslatableHtmlContentId element = 1;

      // The position of the item to check.
      uint32 position = 2;
    }

    // Structure of an item previous position check rule.
    message HasElementXBeforeElementYSpec {

      // The previous position of an item.
      TranslatableHtmlContentId considered_element = 1;

      // The next element of the item.
      TranslatableHtmlContentId later_element = 2;
    }
  }
}

// Answer type: ClickOnImage. Structure of the image selection input interaction.
message ImageClickInputInstance {

  // A set of arguments to customize the image click input.
  CustomizationArgs customization_args = 1;

  // A list of answer groups of the image click input.
  repeated AnswerGroup answer_groups = 2;

  // The default outcome of the image click input.
  Outcome default_outcome = 3;

  // A list of all the hints for image click input.
  repeated Hint hints = 4;

  // Image click input doesn't yet support solutions.

  // Structure of the customization args of the image click input.
  message CustomizationArgs {

    // An image with the regions.
    ImageWithRegions image_and_regions = 1;
  }

  // Structure of a single answer group of image selection input.
  message AnswerGroup {

    // A base answer group is a set of common items for the answer groups in all the interactions.
    BaseAnswerGroup base_answer_group = 1;

    // A list of all the rules of the image click input.
    repeated RuleSpec rule_specs = 2;
  }

  // Structure of the rules of the image click input.
  message RuleSpec {

    // Different rules which can be applied on the image click input.
    oneof rule_type {

      // A rule to check the region availability.
      IsInRegionSpec is_in_region = 1;
    }

    // Structure of a single is in region.
    message IsInRegionSpec {
      string input_region = 1;
    }
  }
}

// Answer type: RatioExpression. Structure of the ratio input interaction.
message RatioExpressionInputInstance {

  // A set of arguments to customize the ratio expression input.
  CustomizationArgs customization_args = 1;

  // A list of answer groups of the ratio expression input interaction instance.
  repeated AnswerGroup answer_groups = 2;

  // The default outcome of the ratio expression input.
  Outcome default_outcome = 3;

  // A list of hints for the ratio expression input.
  repeated Hint hints = 4;

  // The solution of the ratio expression input.
  Solution solution = 5;

  // Structure of the customization args of the ratio expression input.
  message CustomizationArgs {

    // A placeholder for the ratio expression input.
    SubtitledHtml placeholder = 1;

    // The number of terms in the ration expression.
    int32 number_of_terms = 2;
  }

  // Structure of the solution of the ratio expression input.
  message Solution {

    // A set of common items for the solution in all interactions.
    BaseSolution base_solution = 1;

    // The correct answer of this ratio expression input.
    RatioExpression correct_answer = 2;
  }

  // Structure of a single answer group of ratio expression input.
  message AnswerGroup {

    // A set of common items for the answer groups in all the interactions.
    BaseAnswerGroup base_answer_group = 1;

    // A list of all the rules of the ratio expression input.
    repeated RuleSpec rule_specs = 2;
  }

  // Structure of the rules of the ratio expression input.
  message RuleSpec {

    // Different rules which can be applied on the ratio expression input.
    oneof rule_type {

      // A rule to check the equality.
      EqualsSpec equals = 1;

      // A rule to check the equivalent.
      IsEquivalentSpec is_equivalent = 2;

      // A rule to check the number of terms.
      HasNumberOfTermsEqualToSpec has_number_of_terms_equal_to = 3;

      // A rule to check whether a ratio has a specific term with a specific value.
      HasSpecificTermEqualToSpec has_specific_term_equal_to = 4;
    }

    // Structure of the equal rule check.
    message EqualsSpec {
      RatioExpression input = 1;
    }

    // Structure of the equivalent rule check.
    message IsEquivalentSpec {
      RatioExpression input = 1;
    }

    // Structure of the number of terms equal rule check.
    message HasNumberOfTermsEqualToSpec {
      uint32 input_term_count = 1;
    }

    // Structure of the specific terms rule check.
    message HasSpecificTermEqualToSpec {
      uint32 input_term_index = 1;
      uint32 input_expected_term_value = 2;
    }
  }
}

// Answer type: none (N/A since no answers are submitted for this interaction). Structure of a
// single end exploration type interaction.
message EndExplorationInstance {
  // No answers can be submitted to the end exploration interaction, so there are neither answer
  // groups nor solutions. The interaction does have customization arguments, but they aren't
  // supported in the Android app. No default outcome is possible since the user takes no
  // interactions. No hints can be shown to the user.
}

// Common fields for all answer groups.
message BaseAnswerGroup {

  // An outcome is a common way of reponse for all interactions.
  Outcome outcome = 1;

  // The misconception which is tagged to a single skill.
  Misconception tagged_skill_misconception = 2;
}

// Structure of the outcome of any interaction.
message Outcome {

  // The name of the next state.
  string destination_state = 1;

  // The feedback is the reponse for the learners input in interaction.
  SubtitledHtml feedback = 2;

  // The label to mark the answer correct.
  bool labelled_as_correct = 3;
}

// Structure for a single hint
message Hint {

  // The content of the hint.
  SubtitledHtml hint_content = 1;
}

// Common fields for all solutions.
message BaseSolution {

  // The explanation of the solution.
  SubtitledHtml explanation = 1;
}

// Convenience collection object for all potential types of solutions.
message Solution {

  // The different type of interactions existed in an exploration.
  oneof interaction_type {

    // The interaction to allow fraction inputs.
    FractionInputInstance.Solution fraction_instance_solution = 1;

    // The interaction to allow numeric inputs.
    NumericInputInstance.Solution numeric_input_instance_solution = 2;

    // The interaction to allow text inputs.
    TextInputInstance.Solution text_input_instance_solution = 3;

    // The interaction to allow drag and drop inputs.
    DragAndDropSortInputInstance.Solution drag_and_drop_sort_input_instance_solution = 4;

    // The interaction to allow ratio inputs.
    RatioExpressionInputInstance.Solution ratio_expression_input_instance_solution = 5;
  }
}

// Structure for a single misconception, after parsing the original string received from the
// backend:
// https://github.com/oppia/oppia/blob/896466ae8b/core/templates/pages/exploration-editor-page/
// editor-tab/templates/modal-templates/add-answer-group-modal.controller.ts#L60
message Misconception {

  // The id of the skill.
  string skill_id = 1;

  // The id of the misconception.
  string misconception_id = 2;
}
